#pragma once
#include "Living.h"
#include "Object.h"
#include "Graphics.h"
#include "Movable.h"
#include "Mat.h"
#include "StaticObject.h"
#include "MState.h"
#include "Skill.h"
#include "StaticObject.h"


enum mt { basemonster, yeti, bat };

class Monster : public Living, public Movable, public std::enable_shared_from_this<Monster>
{
protected:
	AABB* focus;
	Point disfedge;
	Cooldown cd, invulnerable, jcd, animantioncooldown;
	std::shared_ptr<Graphics> mdisp;
private:
	Monster();

	////////////////////////////////////////////////////////////////////////////////////////
	//Movement managment			
	//
	//\brief   moves the object
	//
	//\param spdx   movement value - pixels in the x axis
	//\param spdy   movement value - pixels in the y axis
	////////////////////////////////////////////////////////////////////////////////////////
	void Move(double spdx, double spdy);

public:
	//friend class
	friend AABB;

	mstates mnstrstate;
	////////////////////////////////////////////////////////////////////////////////////////
	//Constructor			
	//
	//\brief   sets the objects different parameters
	//
	//\param range   AABB  
	//\param hp      Health Points
	//\param ad      Attack Damage
	//\param window  window handle pointer
	////////////////////////////////////////////////////////////////////////////////////////
	Monster(AABB range, double hp, double ad, double spd, std::shared_ptr<sf::RenderWindow> window, std::shared_ptr<sf::Texture> txt);


	////////////////////////////////////////////////////////////////////////////////////////
	//Graphical draw			
	//
	//\brief   Draws the object	to the window						
	////////////////////////////////////////////////////////////////////////////////////////
	void draw();

	////////////////////////////////////////////////////////////////////////////////////////
	//accessor			
	//
	//\brief   returns the object type											
	////////////////////////////////////////////////////////////////////////////////////////
	virtual short reType();

	////////////////////////////////////////////////////////////////////////////////////////
	//Graphics updater		
	//
	//\brief   updates the graphical position of the object and any other graphical changes									
	////////////////////////////////////////////////////////////////////////////////////////
	void refreshgraphics(sf::Vector2f pos);


	////////////////////////////////////////////////////////////////////////////////////////
   //collision resolution		
   //
   //\brief   resolves intersection with different object types								
   ////////////////////////////////////////////////////////////////////////////////////////
	bool InteractWith(Interactable* obj, short type);

	////////////////////////////////////////////////////////////////////////////////////////
	//Waypoint setter
	//
	//\brief   sets a way point for the object							
	////////////////////////////////////////////////////////////////////////////////////////
	void setFocus(AABB* cofob);

	////////////////////////////////////////////////////////////////////////////////////////
	//Action center	
	//
	//\brief   gets commands depending on state and focus and reacts acordingly									
	////////////////////////////////////////////////////////////////////////////////////////
	virtual void Controls();

	void action();

	void calcDisFromEdge(StaticObject* obj);

	void PushBack(short direction);

	void cc();
	////////////////////////////////////////////////////////////////////////////////////////
	//Default destructor		
	//
	//\brief  destroys the object							
	////////////////////////////////////////////////////////////////////////////////////////
	~Monster();
};